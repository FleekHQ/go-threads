// Code generated by protoc-gen-go. DO NOT EDIT.
// source: threadsnet.proto

package threads_net_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetHostIDRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHostIDRequest) Reset()         { *m = GetHostIDRequest{} }
func (m *GetHostIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetHostIDRequest) ProtoMessage()    {}
func (*GetHostIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{0}
}

func (m *GetHostIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHostIDRequest.Unmarshal(m, b)
}
func (m *GetHostIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHostIDRequest.Marshal(b, m, deterministic)
}
func (m *GetHostIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHostIDRequest.Merge(m, src)
}
func (m *GetHostIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetHostIDRequest.Size(m)
}
func (m *GetHostIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHostIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHostIDRequest proto.InternalMessageInfo

type GetHostIDReply struct {
	PeerID               []byte   `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHostIDReply) Reset()         { *m = GetHostIDReply{} }
func (m *GetHostIDReply) String() string { return proto.CompactTextString(m) }
func (*GetHostIDReply) ProtoMessage()    {}
func (*GetHostIDReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{1}
}

func (m *GetHostIDReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHostIDReply.Unmarshal(m, b)
}
func (m *GetHostIDReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHostIDReply.Marshal(b, m, deterministic)
}
func (m *GetHostIDReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHostIDReply.Merge(m, src)
}
func (m *GetHostIDReply) XXX_Size() int {
	return xxx_messageInfo_GetHostIDReply.Size(m)
}
func (m *GetHostIDReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHostIDReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetHostIDReply proto.InternalMessageInfo

func (m *GetHostIDReply) GetPeerID() []byte {
	if m != nil {
		return m.PeerID
	}
	return nil
}

type GetTokenRequest struct {
	// Types that are valid to be assigned to Payload:
	//	*GetTokenRequest_Key
	//	*GetTokenRequest_Signature
	Payload              isGetTokenRequest_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetTokenRequest) Reset()         { *m = GetTokenRequest{} }
func (m *GetTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenRequest) ProtoMessage()    {}
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{2}
}

func (m *GetTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenRequest.Unmarshal(m, b)
}
func (m *GetTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenRequest.Marshal(b, m, deterministic)
}
func (m *GetTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenRequest.Merge(m, src)
}
func (m *GetTokenRequest) XXX_Size() int {
	return xxx_messageInfo_GetTokenRequest.Size(m)
}
func (m *GetTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenRequest proto.InternalMessageInfo

type isGetTokenRequest_Payload interface {
	isGetTokenRequest_Payload()
}

type GetTokenRequest_Key struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}

type GetTokenRequest_Signature struct {
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3,oneof"`
}

func (*GetTokenRequest_Key) isGetTokenRequest_Payload() {}

func (*GetTokenRequest_Signature) isGetTokenRequest_Payload() {}

func (m *GetTokenRequest) GetPayload() isGetTokenRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GetTokenRequest) GetKey() string {
	if x, ok := m.GetPayload().(*GetTokenRequest_Key); ok {
		return x.Key
	}
	return ""
}

func (m *GetTokenRequest) GetSignature() []byte {
	if x, ok := m.GetPayload().(*GetTokenRequest_Signature); ok {
		return x.Signature
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetTokenRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetTokenRequest_Key)(nil),
		(*GetTokenRequest_Signature)(nil),
	}
}

type GetTokenReply struct {
	// Types that are valid to be assigned to Payload:
	//	*GetTokenReply_Challenge
	//	*GetTokenReply_Token
	Payload              isGetTokenReply_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetTokenReply) Reset()         { *m = GetTokenReply{} }
func (m *GetTokenReply) String() string { return proto.CompactTextString(m) }
func (*GetTokenReply) ProtoMessage()    {}
func (*GetTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{3}
}

func (m *GetTokenReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenReply.Unmarshal(m, b)
}
func (m *GetTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenReply.Marshal(b, m, deterministic)
}
func (m *GetTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenReply.Merge(m, src)
}
func (m *GetTokenReply) XXX_Size() int {
	return xxx_messageInfo_GetTokenReply.Size(m)
}
func (m *GetTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenReply proto.InternalMessageInfo

type isGetTokenReply_Payload interface {
	isGetTokenReply_Payload()
}

type GetTokenReply_Challenge struct {
	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}

type GetTokenReply_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

func (*GetTokenReply_Challenge) isGetTokenReply_Payload() {}

func (*GetTokenReply_Token) isGetTokenReply_Payload() {}

func (m *GetTokenReply) GetPayload() isGetTokenReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GetTokenReply) GetChallenge() []byte {
	if x, ok := m.GetPayload().(*GetTokenReply_Challenge); ok {
		return x.Challenge
	}
	return nil
}

func (m *GetTokenReply) GetToken() string {
	if x, ok := m.GetPayload().(*GetTokenReply_Token); ok {
		return x.Token
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetTokenReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetTokenReply_Challenge)(nil),
		(*GetTokenReply_Token)(nil),
	}
}

type CreateThreadRequest struct {
	ThreadID             []byte   `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	Keys                 *Keys    `protobuf:"bytes,2,opt,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateThreadRequest) Reset()         { *m = CreateThreadRequest{} }
func (m *CreateThreadRequest) String() string { return proto.CompactTextString(m) }
func (*CreateThreadRequest) ProtoMessage()    {}
func (*CreateThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{4}
}

func (m *CreateThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateThreadRequest.Unmarshal(m, b)
}
func (m *CreateThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateThreadRequest.Marshal(b, m, deterministic)
}
func (m *CreateThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateThreadRequest.Merge(m, src)
}
func (m *CreateThreadRequest) XXX_Size() int {
	return xxx_messageInfo_CreateThreadRequest.Size(m)
}
func (m *CreateThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateThreadRequest proto.InternalMessageInfo

func (m *CreateThreadRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *CreateThreadRequest) GetKeys() *Keys {
	if m != nil {
		return m.Keys
	}
	return nil
}

type Keys struct {
	ThreadKey            []byte   `protobuf:"bytes,1,opt,name=threadKey,proto3" json:"threadKey,omitempty"`
	LogKey               []byte   `protobuf:"bytes,2,opt,name=logKey,proto3" json:"logKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Keys) Reset()         { *m = Keys{} }
func (m *Keys) String() string { return proto.CompactTextString(m) }
func (*Keys) ProtoMessage()    {}
func (*Keys) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{5}
}

func (m *Keys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Keys.Unmarshal(m, b)
}
func (m *Keys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Keys.Marshal(b, m, deterministic)
}
func (m *Keys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keys.Merge(m, src)
}
func (m *Keys) XXX_Size() int {
	return xxx_messageInfo_Keys.Size(m)
}
func (m *Keys) XXX_DiscardUnknown() {
	xxx_messageInfo_Keys.DiscardUnknown(m)
}

var xxx_messageInfo_Keys proto.InternalMessageInfo

func (m *Keys) GetThreadKey() []byte {
	if m != nil {
		return m.ThreadKey
	}
	return nil
}

func (m *Keys) GetLogKey() []byte {
	if m != nil {
		return m.LogKey
	}
	return nil
}

type ThreadInfoReply struct {
	ThreadID             []byte     `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	ThreadKey            []byte     `protobuf:"bytes,2,opt,name=threadKey,proto3" json:"threadKey,omitempty"`
	Logs                 []*LogInfo `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	Addrs                [][]byte   `protobuf:"bytes,4,rep,name=addrs,proto3" json:"addrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ThreadInfoReply) Reset()         { *m = ThreadInfoReply{} }
func (m *ThreadInfoReply) String() string { return proto.CompactTextString(m) }
func (*ThreadInfoReply) ProtoMessage()    {}
func (*ThreadInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{6}
}

func (m *ThreadInfoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThreadInfoReply.Unmarshal(m, b)
}
func (m *ThreadInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThreadInfoReply.Marshal(b, m, deterministic)
}
func (m *ThreadInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreadInfoReply.Merge(m, src)
}
func (m *ThreadInfoReply) XXX_Size() int {
	return xxx_messageInfo_ThreadInfoReply.Size(m)
}
func (m *ThreadInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreadInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_ThreadInfoReply proto.InternalMessageInfo

func (m *ThreadInfoReply) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *ThreadInfoReply) GetThreadKey() []byte {
	if m != nil {
		return m.ThreadKey
	}
	return nil
}

func (m *ThreadInfoReply) GetLogs() []*LogInfo {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *ThreadInfoReply) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type LogInfo struct {
	ID                   []byte   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PubKey               []byte   `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	PrivKey              []byte   `protobuf:"bytes,3,opt,name=privKey,proto3" json:"privKey,omitempty"`
	Addrs                [][]byte `protobuf:"bytes,4,rep,name=addrs,proto3" json:"addrs,omitempty"`
	Head                 []byte   `protobuf:"bytes,5,opt,name=head,proto3" json:"head,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogInfo) Reset()         { *m = LogInfo{} }
func (m *LogInfo) String() string { return proto.CompactTextString(m) }
func (*LogInfo) ProtoMessage()    {}
func (*LogInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{7}
}

func (m *LogInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogInfo.Unmarshal(m, b)
}
func (m *LogInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogInfo.Marshal(b, m, deterministic)
}
func (m *LogInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogInfo.Merge(m, src)
}
func (m *LogInfo) XXX_Size() int {
	return xxx_messageInfo_LogInfo.Size(m)
}
func (m *LogInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LogInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LogInfo proto.InternalMessageInfo

func (m *LogInfo) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *LogInfo) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *LogInfo) GetPrivKey() []byte {
	if m != nil {
		return m.PrivKey
	}
	return nil
}

func (m *LogInfo) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *LogInfo) GetHead() []byte {
	if m != nil {
		return m.Head
	}
	return nil
}

type AddThreadRequest struct {
	Addr                 []byte   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Keys                 *Keys    `protobuf:"bytes,2,opt,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddThreadRequest) Reset()         { *m = AddThreadRequest{} }
func (m *AddThreadRequest) String() string { return proto.CompactTextString(m) }
func (*AddThreadRequest) ProtoMessage()    {}
func (*AddThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{8}
}

func (m *AddThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddThreadRequest.Unmarshal(m, b)
}
func (m *AddThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddThreadRequest.Marshal(b, m, deterministic)
}
func (m *AddThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddThreadRequest.Merge(m, src)
}
func (m *AddThreadRequest) XXX_Size() int {
	return xxx_messageInfo_AddThreadRequest.Size(m)
}
func (m *AddThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddThreadRequest proto.InternalMessageInfo

func (m *AddThreadRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddThreadRequest) GetKeys() *Keys {
	if m != nil {
		return m.Keys
	}
	return nil
}

type GetThreadRequest struct {
	ThreadID             []byte   `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetThreadRequest) Reset()         { *m = GetThreadRequest{} }
func (m *GetThreadRequest) String() string { return proto.CompactTextString(m) }
func (*GetThreadRequest) ProtoMessage()    {}
func (*GetThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{9}
}

func (m *GetThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetThreadRequest.Unmarshal(m, b)
}
func (m *GetThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetThreadRequest.Marshal(b, m, deterministic)
}
func (m *GetThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetThreadRequest.Merge(m, src)
}
func (m *GetThreadRequest) XXX_Size() int {
	return xxx_messageInfo_GetThreadRequest.Size(m)
}
func (m *GetThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetThreadRequest proto.InternalMessageInfo

func (m *GetThreadRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

type PullThreadRequest struct {
	ThreadID             []byte   `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullThreadRequest) Reset()         { *m = PullThreadRequest{} }
func (m *PullThreadRequest) String() string { return proto.CompactTextString(m) }
func (*PullThreadRequest) ProtoMessage()    {}
func (*PullThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{10}
}

func (m *PullThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullThreadRequest.Unmarshal(m, b)
}
func (m *PullThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullThreadRequest.Marshal(b, m, deterministic)
}
func (m *PullThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullThreadRequest.Merge(m, src)
}
func (m *PullThreadRequest) XXX_Size() int {
	return xxx_messageInfo_PullThreadRequest.Size(m)
}
func (m *PullThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullThreadRequest proto.InternalMessageInfo

func (m *PullThreadRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

type PullThreadReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullThreadReply) Reset()         { *m = PullThreadReply{} }
func (m *PullThreadReply) String() string { return proto.CompactTextString(m) }
func (*PullThreadReply) ProtoMessage()    {}
func (*PullThreadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{11}
}

func (m *PullThreadReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullThreadReply.Unmarshal(m, b)
}
func (m *PullThreadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullThreadReply.Marshal(b, m, deterministic)
}
func (m *PullThreadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullThreadReply.Merge(m, src)
}
func (m *PullThreadReply) XXX_Size() int {
	return xxx_messageInfo_PullThreadReply.Size(m)
}
func (m *PullThreadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PullThreadReply.DiscardUnknown(m)
}

var xxx_messageInfo_PullThreadReply proto.InternalMessageInfo

type DeleteThreadRequest struct {
	ThreadID             []byte   `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteThreadRequest) Reset()         { *m = DeleteThreadRequest{} }
func (m *DeleteThreadRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteThreadRequest) ProtoMessage()    {}
func (*DeleteThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{12}
}

func (m *DeleteThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteThreadRequest.Unmarshal(m, b)
}
func (m *DeleteThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteThreadRequest.Marshal(b, m, deterministic)
}
func (m *DeleteThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteThreadRequest.Merge(m, src)
}
func (m *DeleteThreadRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteThreadRequest.Size(m)
}
func (m *DeleteThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteThreadRequest proto.InternalMessageInfo

func (m *DeleteThreadRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

type DeleteThreadReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteThreadReply) Reset()         { *m = DeleteThreadReply{} }
func (m *DeleteThreadReply) String() string { return proto.CompactTextString(m) }
func (*DeleteThreadReply) ProtoMessage()    {}
func (*DeleteThreadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{13}
}

func (m *DeleteThreadReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteThreadReply.Unmarshal(m, b)
}
func (m *DeleteThreadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteThreadReply.Marshal(b, m, deterministic)
}
func (m *DeleteThreadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteThreadReply.Merge(m, src)
}
func (m *DeleteThreadReply) XXX_Size() int {
	return xxx_messageInfo_DeleteThreadReply.Size(m)
}
func (m *DeleteThreadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteThreadReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteThreadReply proto.InternalMessageInfo

type AddReplicatorRequest struct {
	ThreadID             []byte   `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	Addr                 []byte   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	LogID                []byte   `protobuf:"bytes,3,opt,name=logID,proto3" json:"logID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddReplicatorRequest) Reset()         { *m = AddReplicatorRequest{} }
func (m *AddReplicatorRequest) String() string { return proto.CompactTextString(m) }
func (*AddReplicatorRequest) ProtoMessage()    {}
func (*AddReplicatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{14}
}

func (m *AddReplicatorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddReplicatorRequest.Unmarshal(m, b)
}
func (m *AddReplicatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddReplicatorRequest.Marshal(b, m, deterministic)
}
func (m *AddReplicatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReplicatorRequest.Merge(m, src)
}
func (m *AddReplicatorRequest) XXX_Size() int {
	return xxx_messageInfo_AddReplicatorRequest.Size(m)
}
func (m *AddReplicatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReplicatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddReplicatorRequest proto.InternalMessageInfo

func (m *AddReplicatorRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *AddReplicatorRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddReplicatorRequest) GetLogID() []byte {
	if m != nil {
		return m.LogID
	}
	return nil
}

type AddReplicatorReply struct {
	PeerID               []byte   `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddReplicatorReply) Reset()         { *m = AddReplicatorReply{} }
func (m *AddReplicatorReply) String() string { return proto.CompactTextString(m) }
func (*AddReplicatorReply) ProtoMessage()    {}
func (*AddReplicatorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{15}
}

func (m *AddReplicatorReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddReplicatorReply.Unmarshal(m, b)
}
func (m *AddReplicatorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddReplicatorReply.Marshal(b, m, deterministic)
}
func (m *AddReplicatorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReplicatorReply.Merge(m, src)
}
func (m *AddReplicatorReply) XXX_Size() int {
	return xxx_messageInfo_AddReplicatorReply.Size(m)
}
func (m *AddReplicatorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReplicatorReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddReplicatorReply proto.InternalMessageInfo

func (m *AddReplicatorReply) GetPeerID() []byte {
	if m != nil {
		return m.PeerID
	}
	return nil
}

type CreateRecordRequest struct {
	ThreadID             []byte   `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	Body                 []byte   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRecordRequest) Reset()         { *m = CreateRecordRequest{} }
func (m *CreateRecordRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRecordRequest) ProtoMessage()    {}
func (*CreateRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{16}
}

func (m *CreateRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRecordRequest.Unmarshal(m, b)
}
func (m *CreateRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRecordRequest.Marshal(b, m, deterministic)
}
func (m *CreateRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRecordRequest.Merge(m, src)
}
func (m *CreateRecordRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRecordRequest.Size(m)
}
func (m *CreateRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRecordRequest proto.InternalMessageInfo

func (m *CreateRecordRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *CreateRecordRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type NewRecordReply struct {
	ThreadID             []byte   `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	LogID                []byte   `protobuf:"bytes,2,opt,name=logID,proto3" json:"logID,omitempty"`
	Record               *Record  `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewRecordReply) Reset()         { *m = NewRecordReply{} }
func (m *NewRecordReply) String() string { return proto.CompactTextString(m) }
func (*NewRecordReply) ProtoMessage()    {}
func (*NewRecordReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{17}
}

func (m *NewRecordReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewRecordReply.Unmarshal(m, b)
}
func (m *NewRecordReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewRecordReply.Marshal(b, m, deterministic)
}
func (m *NewRecordReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewRecordReply.Merge(m, src)
}
func (m *NewRecordReply) XXX_Size() int {
	return xxx_messageInfo_NewRecordReply.Size(m)
}
func (m *NewRecordReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NewRecordReply.DiscardUnknown(m)
}

var xxx_messageInfo_NewRecordReply proto.InternalMessageInfo

func (m *NewRecordReply) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *NewRecordReply) GetLogID() []byte {
	if m != nil {
		return m.LogID
	}
	return nil
}

func (m *NewRecordReply) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type AddRecordRequest struct {
	ThreadID             []byte   `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	LogID                []byte   `protobuf:"bytes,2,opt,name=logID,proto3" json:"logID,omitempty"`
	Record               *Record  `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRecordRequest) Reset()         { *m = AddRecordRequest{} }
func (m *AddRecordRequest) String() string { return proto.CompactTextString(m) }
func (*AddRecordRequest) ProtoMessage()    {}
func (*AddRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{18}
}

func (m *AddRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRecordRequest.Unmarshal(m, b)
}
func (m *AddRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRecordRequest.Marshal(b, m, deterministic)
}
func (m *AddRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRecordRequest.Merge(m, src)
}
func (m *AddRecordRequest) XXX_Size() int {
	return xxx_messageInfo_AddRecordRequest.Size(m)
}
func (m *AddRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRecordRequest proto.InternalMessageInfo

func (m *AddRecordRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *AddRecordRequest) GetLogID() []byte {
	if m != nil {
		return m.LogID
	}
	return nil
}

func (m *AddRecordRequest) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type Record struct {
	RecordNode           []byte   `protobuf:"bytes,1,opt,name=recordNode,proto3" json:"recordNode,omitempty"`
	EventNode            []byte   `protobuf:"bytes,2,opt,name=eventNode,proto3" json:"eventNode,omitempty"`
	HeaderNode           []byte   `protobuf:"bytes,3,opt,name=headerNode,proto3" json:"headerNode,omitempty"`
	BodyNode             []byte   `protobuf:"bytes,4,opt,name=bodyNode,proto3" json:"bodyNode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{19}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetRecordNode() []byte {
	if m != nil {
		return m.RecordNode
	}
	return nil
}

func (m *Record) GetEventNode() []byte {
	if m != nil {
		return m.EventNode
	}
	return nil
}

func (m *Record) GetHeaderNode() []byte {
	if m != nil {
		return m.HeaderNode
	}
	return nil
}

func (m *Record) GetBodyNode() []byte {
	if m != nil {
		return m.BodyNode
	}
	return nil
}

type AddRecordReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRecordReply) Reset()         { *m = AddRecordReply{} }
func (m *AddRecordReply) String() string { return proto.CompactTextString(m) }
func (*AddRecordReply) ProtoMessage()    {}
func (*AddRecordReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{20}
}

func (m *AddRecordReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRecordReply.Unmarshal(m, b)
}
func (m *AddRecordReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRecordReply.Marshal(b, m, deterministic)
}
func (m *AddRecordReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRecordReply.Merge(m, src)
}
func (m *AddRecordReply) XXX_Size() int {
	return xxx_messageInfo_AddRecordReply.Size(m)
}
func (m *AddRecordReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRecordReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddRecordReply proto.InternalMessageInfo

type GetRecordRequest struct {
	ThreadID             []byte   `protobuf:"bytes,1,opt,name=threadID,proto3" json:"threadID,omitempty"`
	RecordID             []byte   `protobuf:"bytes,2,opt,name=recordID,proto3" json:"recordID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRecordRequest) Reset()         { *m = GetRecordRequest{} }
func (m *GetRecordRequest) String() string { return proto.CompactTextString(m) }
func (*GetRecordRequest) ProtoMessage()    {}
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{21}
}

func (m *GetRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRecordRequest.Unmarshal(m, b)
}
func (m *GetRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRecordRequest.Marshal(b, m, deterministic)
}
func (m *GetRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordRequest.Merge(m, src)
}
func (m *GetRecordRequest) XXX_Size() int {
	return xxx_messageInfo_GetRecordRequest.Size(m)
}
func (m *GetRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordRequest proto.InternalMessageInfo

func (m *GetRecordRequest) GetThreadID() []byte {
	if m != nil {
		return m.ThreadID
	}
	return nil
}

func (m *GetRecordRequest) GetRecordID() []byte {
	if m != nil {
		return m.RecordID
	}
	return nil
}

type GetRecordReply struct {
	Record               *Record  `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRecordReply) Reset()         { *m = GetRecordReply{} }
func (m *GetRecordReply) String() string { return proto.CompactTextString(m) }
func (*GetRecordReply) ProtoMessage()    {}
func (*GetRecordReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{22}
}

func (m *GetRecordReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRecordReply.Unmarshal(m, b)
}
func (m *GetRecordReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRecordReply.Marshal(b, m, deterministic)
}
func (m *GetRecordReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordReply.Merge(m, src)
}
func (m *GetRecordReply) XXX_Size() int {
	return xxx_messageInfo_GetRecordReply.Size(m)
}
func (m *GetRecordReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordReply proto.InternalMessageInfo

func (m *GetRecordReply) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type SubscribeRequest struct {
	ThreadIDs            [][]byte `protobuf:"bytes,1,rep,name=threadIDs,proto3" json:"threadIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a395cd12426f651, []int{23}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetThreadIDs() [][]byte {
	if m != nil {
		return m.ThreadIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*GetHostIDRequest)(nil), "threads.net.pb.GetHostIDRequest")
	proto.RegisterType((*GetHostIDReply)(nil), "threads.net.pb.GetHostIDReply")
	proto.RegisterType((*GetTokenRequest)(nil), "threads.net.pb.GetTokenRequest")
	proto.RegisterType((*GetTokenReply)(nil), "threads.net.pb.GetTokenReply")
	proto.RegisterType((*CreateThreadRequest)(nil), "threads.net.pb.CreateThreadRequest")
	proto.RegisterType((*Keys)(nil), "threads.net.pb.Keys")
	proto.RegisterType((*ThreadInfoReply)(nil), "threads.net.pb.ThreadInfoReply")
	proto.RegisterType((*LogInfo)(nil), "threads.net.pb.LogInfo")
	proto.RegisterType((*AddThreadRequest)(nil), "threads.net.pb.AddThreadRequest")
	proto.RegisterType((*GetThreadRequest)(nil), "threads.net.pb.GetThreadRequest")
	proto.RegisterType((*PullThreadRequest)(nil), "threads.net.pb.PullThreadRequest")
	proto.RegisterType((*PullThreadReply)(nil), "threads.net.pb.PullThreadReply")
	proto.RegisterType((*DeleteThreadRequest)(nil), "threads.net.pb.DeleteThreadRequest")
	proto.RegisterType((*DeleteThreadReply)(nil), "threads.net.pb.DeleteThreadReply")
	proto.RegisterType((*AddReplicatorRequest)(nil), "threads.net.pb.AddReplicatorRequest")
	proto.RegisterType((*AddReplicatorReply)(nil), "threads.net.pb.AddReplicatorReply")
	proto.RegisterType((*CreateRecordRequest)(nil), "threads.net.pb.CreateRecordRequest")
	proto.RegisterType((*NewRecordReply)(nil), "threads.net.pb.NewRecordReply")
	proto.RegisterType((*AddRecordRequest)(nil), "threads.net.pb.AddRecordRequest")
	proto.RegisterType((*Record)(nil), "threads.net.pb.Record")
	proto.RegisterType((*AddRecordReply)(nil), "threads.net.pb.AddRecordReply")
	proto.RegisterType((*GetRecordRequest)(nil), "threads.net.pb.GetRecordRequest")
	proto.RegisterType((*GetRecordReply)(nil), "threads.net.pb.GetRecordReply")
	proto.RegisterType((*SubscribeRequest)(nil), "threads.net.pb.SubscribeRequest")
}

func init() { proto.RegisterFile("threadsnet.proto", fileDescriptor_0a395cd12426f651) }

var fileDescriptor_0a395cd12426f651 = []byte{
	// 875 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x9d, 0xbf, 0x7a, 0x9a, 0xa6, 0xe9, 0x36, 0x2a, 0x51, 0x80, 0x90, 0x2e, 0x1c, 0x22,
	0x81, 0x42, 0x09, 0x17, 0x0e, 0x1c, 0x48, 0x49, 0xd5, 0x84, 0xa2, 0x10, 0xdc, 0x80, 0x90, 0x8a,
	0x54, 0x39, 0xf1, 0x92, 0x46, 0xb5, 0xe2, 0x60, 0x6f, 0x0a, 0xb9, 0xf2, 0x00, 0x3c, 0x04, 0xaf,
	0xc9, 0x05, 0xed, 0xae, 0xed, 0xf8, 0xaf, 0x89, 0x2b, 0x71, 0xf3, 0xcc, 0xce, 0x7c, 0xf3, 0xb3,
	0x33, 0xdf, 0x1a, 0x4a, 0xf4, 0xca, 0x22, 0x9a, 0x6e, 0xcf, 0x08, 0x6d, 0xce, 0x2d, 0x93, 0x9a,
	0xa8, 0xe8, 0x68, 0x9a, 0x5c, 0x35, 0xc2, 0x08, 0x4a, 0xa7, 0x84, 0x76, 0x4d, 0x9b, 0xf6, 0x3a,
	0x2a, 0xf9, 0xbe, 0x20, 0x36, 0xc5, 0x0d, 0x28, 0xfa, 0x74, 0x73, 0x63, 0x89, 0x0e, 0x20, 0x37,
	0x27, 0xc4, 0xea, 0x75, 0x2a, 0x52, 0x5d, 0x6a, 0x14, 0x54, 0x47, 0xc2, 0x03, 0xd8, 0x3d, 0x25,
	0x74, 0x68, 0x5e, 0x93, 0x99, 0xe3, 0x8c, 0x10, 0xa4, 0xaf, 0xc9, 0x92, 0xdb, 0x29, 0xdd, 0x94,
	0xca, 0x04, 0x54, 0x03, 0xc5, 0x9e, 0x4e, 0x66, 0x1a, 0x5d, 0x58, 0xa4, 0x22, 0x33, 0x84, 0x6e,
	0x4a, 0x5d, 0xa9, 0x8e, 0x15, 0xc8, 0xcf, 0xb5, 0xa5, 0x61, 0x6a, 0x3a, 0x56, 0x61, 0x67, 0x85,
	0xc8, 0x42, 0xd7, 0x40, 0x19, 0x5f, 0x69, 0x86, 0x41, 0x66, 0x13, 0x22, 0xa2, 0x33, 0x5f, 0x4f,
	0x85, 0x0e, 0x20, 0x4b, 0x99, 0x35, 0xc7, 0x65, 0x11, 0x85, 0xe8, 0xc7, 0xbc, 0x80, 0xfd, 0xb7,
	0x16, 0xd1, 0x28, 0x19, 0xf2, 0xda, 0xdd, 0x4c, 0xab, 0xb0, 0x25, 0x9a, 0xe1, 0x95, 0xe5, 0xc9,
	0xa8, 0x01, 0x99, 0x6b, 0xb2, 0xb4, 0x39, 0xe8, 0x76, 0xab, 0xdc, 0x0c, 0x76, 0xad, 0x79, 0x46,
	0x96, 0xb6, 0xca, 0x2d, 0xf0, 0x6b, 0xc8, 0x30, 0x09, 0x3d, 0x00, 0x45, 0x18, 0x9d, 0x39, 0xd5,
	0x17, 0xd4, 0x95, 0x82, 0x35, 0xd0, 0x30, 0x27, 0xec, 0x48, 0x16, 0x0d, 0x14, 0x12, 0xfe, 0x2d,
	0xc1, 0xae, 0xc8, 0xaa, 0x37, 0xfb, 0x66, 0x8a, 0x8a, 0xd7, 0xe5, 0x15, 0x88, 0x22, 0x87, 0xa3,
	0x3c, 0x85, 0x8c, 0x61, 0x4e, 0xec, 0x4a, 0xba, 0x9e, 0x6e, 0x6c, 0xb7, 0xee, 0x85, 0xb3, 0x7e,
	0x6f, 0x4e, 0x78, 0x14, 0x6e, 0x84, 0xca, 0x90, 0xd5, 0x74, 0xdd, 0xb2, 0x2b, 0x99, 0x7a, 0xba,
	0x51, 0x50, 0x85, 0x80, 0x17, 0x90, 0x77, 0xcc, 0x50, 0x11, 0x64, 0x2f, 0x03, 0xb9, 0xd7, 0xe1,
	0x43, 0xb0, 0x18, 0xf9, 0x6a, 0x10, 0x12, 0xaa, 0x40, 0x7e, 0x6e, 0x4d, 0x6f, 0xd8, 0x41, 0x9a,
	0x1f, 0xb8, 0x62, 0x7c, 0x08, 0x84, 0x20, 0x73, 0x45, 0x34, 0xbd, 0x92, 0xe5, 0xc6, 0xfc, 0x1b,
	0x0f, 0xa0, 0xd4, 0xd6, 0xf5, 0xe0, 0xfd, 0x20, 0xc8, 0x30, 0x07, 0x27, 0x03, 0xfe, 0x7d, 0x87,
	0x7b, 0x69, 0xf2, 0xc1, 0x4e, 0x7c, 0xe3, 0xf8, 0x39, 0xec, 0x0d, 0x16, 0x86, 0x91, 0xdc, 0x61,
	0x0f, 0x76, 0xfd, 0x0e, 0x73, 0x63, 0x89, 0x5f, 0xc0, 0x7e, 0x87, 0x18, 0xe4, 0x0e, 0x83, 0x86,
	0xf7, 0x61, 0x2f, 0xe8, 0xc2, 0x70, 0xbe, 0x42, 0xb9, 0xad, 0xf3, 0xef, 0xe9, 0x58, 0xa3, 0xa6,
	0x95, 0x64, 0x62, 0xdd, 0x6e, 0xc9, 0xbe, 0x6e, 0x95, 0x21, 0x6b, 0x98, 0x93, 0x5e, 0xc7, 0xb9,
	0x17, 0x21, 0xe0, 0x67, 0x80, 0x42, 0xe8, 0xeb, 0x56, 0xfc, 0xc4, 0x5d, 0x1e, 0x95, 0x8c, 0x4d,
	0x4b, 0x4f, 0x98, 0xca, 0xc8, 0xd4, 0xdd, 0x31, 0xe1, 0xdf, 0xd8, 0x82, 0x62, 0x9f, 0xfc, 0x70,
	0x31, 0x36, 0x8d, 0xb9, 0x97, 0xb8, 0xec, 0x4b, 0x1c, 0x35, 0x21, 0x67, 0x71, 0x00, 0x5e, 0xcf,
	0x76, 0xeb, 0x20, 0x7c, 0xfd, 0x0e, 0xbc, 0x63, 0x85, 0x29, 0x1f, 0xaa, 0xe4, 0x79, 0xff, 0x9f,
	0xa8, 0xbf, 0x24, 0xc8, 0x09, 0x15, 0xaa, 0x01, 0x08, 0x65, 0xdf, 0xd4, 0x1d, 0xf2, 0x52, 0x7d,
	0x1a, 0xb6, 0xcd, 0xe4, 0x86, 0xcc, 0x28, 0x3f, 0x76, 0xb6, 0xd9, 0x53, 0x30, 0x6f, 0xb6, 0x1b,
	0xc4, 0xe2, 0xc7, 0xe2, 0x0a, 0x7d, 0x1a, 0x56, 0x0a, 0x6b, 0x2d, 0x3f, 0xcd, 0x88, 0x52, 0x5c,
	0x19, 0x97, 0xa0, 0xe8, 0x2b, 0x9d, 0xcd, 0xd4, 0x3b, 0xbe, 0x0f, 0xc9, 0x9b, 0x51, 0x85, 0x2d,
	0x91, 0xa9, 0xd7, 0x0f, 0x4f, 0xc6, 0x6f, 0xf8, 0x03, 0xe1, 0xbf, 0xcc, 0x55, 0x93, 0xa4, 0x44,
	0x4d, 0x3a, 0x82, 0xd2, 0xf9, 0x62, 0x64, 0x8f, 0xad, 0xe9, 0x88, 0xb8, 0xd9, 0x78, 0xdc, 0xd6,
	0xeb, 0xd8, 0x15, 0x89, 0x33, 0xc6, 0x4a, 0xd1, 0xfa, 0x9b, 0x87, 0x74, 0x7b, 0xd0, 0x43, 0x1f,
	0x40, 0xf1, 0x1e, 0x27, 0x54, 0x0f, 0x87, 0x09, 0xbf, 0x65, 0xd5, 0xda, 0x1a, 0x0b, 0xd6, 0x96,
	0x14, 0x1a, 0xc0, 0x96, 0xfb, 0xe2, 0xa0, 0x47, 0x31, 0xd6, 0xfe, 0xd7, 0xad, 0xfa, 0xf0, 0x76,
	0x03, 0x8e, 0xd6, 0x90, 0x8e, 0x24, 0xf4, 0x19, 0x0a, 0xfe, 0xf7, 0x06, 0x3d, 0x0e, 0x3b, 0xc5,
	0xbc, 0x46, 0xd5, 0x48, 0xe8, 0xd0, 0xb3, 0xc0, 0x33, 0x55, 0x3c, 0x92, 0x8c, 0x96, 0x1e, 0xe6,
	0xcf, 0x84, 0x88, 0x1e, 0x49, 0xc6, 0x36, 0xf3, 0xce, 0x88, 0x2a, 0xc0, 0x8a, 0x15, 0xd1, 0x61,
	0xd8, 0x21, 0x42, 0xb1, 0x51, 0xcc, 0x30, 0xa9, 0xa6, 0xd0, 0x17, 0x28, 0xf8, 0x39, 0x32, 0xda,
	0xcf, 0x18, 0xd2, 0xad, 0x1e, 0xae, 0x37, 0x12, 0xc8, 0x17, 0xb0, 0x13, 0xa0, 0x42, 0xf4, 0x24,
	0xa6, 0xab, 0x11, 0x1e, 0xae, 0xe2, 0x0d, 0x56, 0x02, 0xfc, 0x93, 0x3b, 0x06, 0x0e, 0x1b, 0xdc,
	0x32, 0x06, 0x81, 0x95, 0x8c, 0xce, 0x6b, 0x90, 0x35, 0x71, 0x8a, 0x2d, 0x80, 0xb7, 0xda, 0xb1,
	0x53, 0xb0, 0x01, 0x30, 0xc4, 0x0b, 0x29, 0x67, 0xa3, 0x6e, 0x03, 0x0c, 0x93, 0x46, 0xec, 0x46,
	0x05, 0x01, 0x3f, 0x82, 0xe2, 0x2d, 0x77, 0x14, 0x30, 0xbc, 0xf7, 0x9b, 0x4b, 0x3e, 0x92, 0x8e,
	0x5f, 0xc1, 0xfd, 0xa9, 0xd9, 0xa4, 0xe4, 0x27, 0x9d, 0x1a, 0xc4, 0xb5, 0xbf, 0x9c, 0x11, 0x7a,
	0x39, 0xb1, 0xe6, 0xe3, 0x63, 0x10, 0xd7, 0x6a, 0xf7, 0x09, 0x1d, 0x48, 0x7f, 0x64, 0x18, 0x76,
	0xd5, 0x93, 0x76, 0xe7, 0xbc, 0x7f, 0x32, 0x1c, 0xe5, 0xf8, 0x7f, 0xef, 0xcb, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x51, 0x75, 0xd1, 0xd5, 0x0b, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	GetHostID(ctx context.Context, in *GetHostIDRequest, opts ...grpc.CallOption) (*GetHostIDReply, error)
	GetToken(ctx context.Context, opts ...grpc.CallOption) (API_GetTokenClient, error)
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error)
	AddThread(ctx context.Context, in *AddThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error)
	GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error)
	PullThread(ctx context.Context, in *PullThreadRequest, opts ...grpc.CallOption) (*PullThreadReply, error)
	DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadReply, error)
	AddReplicator(ctx context.Context, in *AddReplicatorRequest, opts ...grpc.CallOption) (*AddReplicatorReply, error)
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*NewRecordReply, error)
	AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordReply, error)
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordReply, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (API_SubscribeClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetHostID(ctx context.Context, in *GetHostIDRequest, opts ...grpc.CallOption) (*GetHostIDReply, error) {
	out := new(GetHostIDReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/GetHostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetToken(ctx context.Context, opts ...grpc.CallOption) (API_GetTokenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/threads.net.pb.API/GetToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetTokenClient{stream}
	return x, nil
}

type API_GetTokenClient interface {
	Send(*GetTokenRequest) error
	Recv() (*GetTokenReply, error)
	grpc.ClientStream
}

type aPIGetTokenClient struct {
	grpc.ClientStream
}

func (x *aPIGetTokenClient) Send(m *GetTokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIGetTokenClient) Recv() (*GetTokenReply, error) {
	m := new(GetTokenReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error) {
	out := new(ThreadInfoReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/CreateThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddThread(ctx context.Context, in *AddThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error) {
	out := new(ThreadInfoReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/AddThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*ThreadInfoReply, error) {
	out := new(ThreadInfoReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/GetThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PullThread(ctx context.Context, in *PullThreadRequest, opts ...grpc.CallOption) (*PullThreadReply, error) {
	out := new(PullThreadReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/PullThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadReply, error) {
	out := new(DeleteThreadReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/DeleteThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddReplicator(ctx context.Context, in *AddReplicatorRequest, opts ...grpc.CallOption) (*AddReplicatorReply, error) {
	out := new(AddReplicatorReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/AddReplicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*NewRecordReply, error) {
	out := new(NewRecordReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordReply, error) {
	out := new(AddRecordReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/AddRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordReply, error) {
	out := new(GetRecordReply)
	err := c.cc.Invoke(ctx, "/threads.net.pb.API/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (API_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/threads.net.pb.API/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_SubscribeClient interface {
	Recv() (*NewRecordReply, error)
	grpc.ClientStream
}

type aPISubscribeClient struct {
	grpc.ClientStream
}

func (x *aPISubscribeClient) Recv() (*NewRecordReply, error) {
	m := new(NewRecordReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	GetHostID(context.Context, *GetHostIDRequest) (*GetHostIDReply, error)
	GetToken(API_GetTokenServer) error
	CreateThread(context.Context, *CreateThreadRequest) (*ThreadInfoReply, error)
	AddThread(context.Context, *AddThreadRequest) (*ThreadInfoReply, error)
	GetThread(context.Context, *GetThreadRequest) (*ThreadInfoReply, error)
	PullThread(context.Context, *PullThreadRequest) (*PullThreadReply, error)
	DeleteThread(context.Context, *DeleteThreadRequest) (*DeleteThreadReply, error)
	AddReplicator(context.Context, *AddReplicatorRequest) (*AddReplicatorReply, error)
	CreateRecord(context.Context, *CreateRecordRequest) (*NewRecordReply, error)
	AddRecord(context.Context, *AddRecordRequest) (*AddRecordReply, error)
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordReply, error)
	Subscribe(*SubscribeRequest, API_SubscribeServer) error
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_GetHostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetHostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/GetHostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetHostID(ctx, req.(*GetHostIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).GetToken(&aPIGetTokenServer{stream})
}

type API_GetTokenServer interface {
	Send(*GetTokenReply) error
	Recv() (*GetTokenRequest, error)
	grpc.ServerStream
}

type aPIGetTokenServer struct {
	grpc.ServerStream
}

func (x *aPIGetTokenServer) Send(m *GetTokenReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIGetTokenServer) Recv() (*GetTokenRequest, error) {
	m := new(GetTokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/CreateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/AddThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddThread(ctx, req.(*AddThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/GetThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PullThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PullThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/PullThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PullThread(ctx, req.(*PullThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/DeleteThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteThread(ctx, req.(*DeleteThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddReplicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddReplicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/AddReplicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddReplicator(ctx, req.(*AddReplicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/AddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddRecord(ctx, req.(*AddRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.net.pb.API/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Subscribe(m, &aPISubscribeServer{stream})
}

type API_SubscribeServer interface {
	Send(*NewRecordReply) error
	grpc.ServerStream
}

type aPISubscribeServer struct {
	grpc.ServerStream
}

func (x *aPISubscribeServer) Send(m *NewRecordReply) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "threads.net.pb.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostID",
			Handler:    _API_GetHostID_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _API_CreateThread_Handler,
		},
		{
			MethodName: "AddThread",
			Handler:    _API_AddThread_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _API_GetThread_Handler,
		},
		{
			MethodName: "PullThread",
			Handler:    _API_PullThread_Handler,
		},
		{
			MethodName: "DeleteThread",
			Handler:    _API_DeleteThread_Handler,
		},
		{
			MethodName: "AddReplicator",
			Handler:    _API_AddReplicator_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _API_CreateRecord_Handler,
		},
		{
			MethodName: "AddRecord",
			Handler:    _API_AddRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _API_GetRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetToken",
			Handler:       _API_GetToken_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _API_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "threadsnet.proto",
}
